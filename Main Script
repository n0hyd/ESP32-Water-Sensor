#include <WiFi.h>
#include <ESP_Mail_Client.h>
#include "time.h"

// Declare global SMTPSession and Session_Config objects
SMTPSession smtp;
Session_Config config;

// WiFi credentials
const char* ssid = "Jones Network";
const char* password = "jonespassword";

// Email details
const char* smtp_host = "smtp.google.com"; // Example: using Office 365
const int smtp_port = 587;
const char* smtp_email = "burkejones@gmail.com"; // Sender's email
const char* smtp_password = "ewf cahb srci yugf"; // App-specific password

// Email recipients
const char* recipient_email = "9139090608@txt.att.net"; // Recipient email (e.g., SMS gateway)

// Time and date settings
const char* ntpServer = "pool.ntp.org";
const long gmtOffset_sec = -21600;   // Central Time (UTC -6 hours)
const int daylightOffset_sec = 3600; // Daylight Saving Time offset (1 hour)

// Capacitive Touch Sensor setup
const int touchPin = T0; // GPIO 4
const int threshold = 30; // Example threshold value for touch detection
const int numSamples = 10; // Number of samples to take for averaging

// Timer settings
const unsigned long timerIntervalMs = 24 * 60 * 60 * 1000; // 24 hours
const unsigned long timerWakeUpMs = 12 * 60 * 60 * 1000; // 12 hours from now

// Battery Voltage
#define BATTERY_PIN 34 // ADC pin to read battery voltage
float batteryVoltage = 0.0;
const float voltageThreshold = 3.3; // Low voltage threshold
const float voltageDividerRatio = 10.0 / 75.0; // Ratio for 10kΩ and 75kΩ resistors

// WiFi timeout
const unsigned long wifiTimeoutMs = 10000; // Timeout for Wi-Fi connection attempt (10 seconds)

// Function declarations
void sendAlert(String subject, String body);
void smtpCallback(SMTP_Status status);
void printLocalTime(String& timeStr, String& dateStr);
void checkBattery();
bool checkWaterSensor();
bool connectToWiFi();
unsigned long calculateSleepDuration();

// Setup function
void setup() {
  Serial.begin(115200);

  // Increment boot count
  static int bootCount = 0;
  ++bootCount;
  Serial.println("Boot number: " + String(bootCount));

  // Check wakeup cause
  if (esp_sleep_get_wakeup_cause() == ESP_SLEEP_WAKEUP_TIMER) {
    // Timer wakeup
    Serial.println("Woke up by timer");
    checkBattery();
    if (!checkWaterSensor()) { // Check water sensor when woken up by timer
      String timeStr, dateStr;
      printLocalTime(timeStr, dateStr);
      String emailBody = "NO water detected\nBattery Voltage: " + String(batteryVoltage, 2) + "V";
      sendAlert("Just checking in", emailBody);
    }

  } else if (esp_sleep_get_wakeup_cause() == ESP_SLEEP_WAKEUP_TOUCHPAD) {
    // Touch wakeup
    Serial.println("Woke up by touch");
    if (checkWaterSensor()) { // Check water sensor when woken up by touch
      String timeStr, dateStr;
      printLocalTime(timeStr, dateStr);
      String emailBody = "DANGER Water Detected!\nCheck basement ASAP!";
      sendAlert("Water Detected", emailBody);
    }
  }

  // Prepare for deep sleep
  unsigned long sleepDuration = calculateSleepDuration();
  esp_sleep_enable_timer_wakeup(sleepDuration);
  esp_deep_sleep_start();
}

void loop() {
  // Won't be reached due to deep sleep mode
}

// Function to calculate sleep duration for timer wakeup
unsigned long calculateSleepDuration() {
  time_t now;
  struct tm timeinfo;
  time(&now);
  localtime_r(&now, &timeinfo);

  int hoursUntilNextWake = (12 - timeinfo.tm_hour + 24) % 24;
  unsigned long sleepDuration = (hoursUntilNextWake * 3600 * 1000000) - (timeinfo.tm_min * 60 * 1000000) - (timeinfo.tm_sec * 1000000);
  return sleepDuration;
}

// Function to check water sensor
bool checkWaterSensor() {
  // Read touch sensor multiple times and average the readings
  int readings[numSamples];
  for (int i = 0; i < numSamples; i++) {
    readings[i] = touchRead(touchPin);
    delay(50); // Small delay between readings
  }
  
  // Sort readings and remove highest and lowest
  std::sort(readings, readings + numSamples);
  
  int sum = 0;
  for (int i = 1; i < numSamples - 1; i++) { // Exclude highest and lowest
    sum += readings[i];
  }
  
  int average = sum / (numSamples - 2); // Average of remaining readings
  Serial.println("Average Touch Sensor Reading: " + String(average));

  // Check if the average reading exceeds the threshold
  return average > threshold;
}

// Function to check the battery voltage
void checkBattery() {
  float adcValue = analogRead(BATTERY_PIN);
  batteryVoltage = adcValue * (3.3 / 4095.0) / voltageDividerRatio; // Adjust for voltage divider ratio
  Serial.println("Battery Voltage: " + String(batteryVoltage, 2) + "V");

  if (batteryVoltage < voltageThreshold) {
    Serial.println("WARNING: Battery voltage is low!");
  }
}

// Function to send an email
void sendAlert(String subject, String body) {
  // Declare the SMTP_Message class variable
  SMTP_Message message;

  // Set the message headers
  message.sender.name = "Burke Jones";
  message.sender.email = smtp_email;
  message.subject = subject;
  message.addRecipient("Recipient", recipient_email);

  // Set the message content
  String messageBody = body + "\n" + "Date & Time: " + getFormattedDateTime();
  message.text.content = messageBody;

  // Set debug option
  smtp.debug(1);

  // Set the callback function to get the sending results
  smtp.callback(smtpCallback);

  // Connect to the SMTP server and send email
  if (!smtp.connect(&config)) {
    Serial.println("Failed to connect to SMTP server");
    return;
  }

  if (!MailClient.sendMail(&smtp, &message)) {
    Serial.println("Error sending Email: " + smtp.errorReason());
  } else {
    Serial.println("Email sent successfully!");
  }

  // Close the SMTP session
  smtp.closeSession();
}

// Function to get the formatted current date and time
String getFormattedDateTime() {
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    return "Failed to obtain time";
  }
  char buffer[30];
  strftime(buffer, sizeof(buffer), "%Y-%m-%d %H:%M:%S", &timeinfo);
  return String(buffer);
}

// Function to handle the SMTP callback
void smtpCallback(SMTP_Status status) {
  // Print the status of the email sending process
  Serial.println(status.info());

  if (status.success()) {
    Serial.println("Email sent successfully.");
  }
}

// Function to connect to Wi-Fi with timeout
bool connectToWiFi() {
  WiFi.begin(ssid, password);
  unsigned long startAttemptTime = millis();

  // Keep trying to connect until the timeout or connection is successful
  while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < wifiTimeoutMs) {
    Serial.println("Attempting to connect to Wi-Fi...");
    delay(500);
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("Connected to Wi-Fi");
    return true;
  } else {
    Serial.println("Failed to connect to Wi-Fi within the timeout");
    return false;
  }
}

// Function to print the local time
void printLocalTime(String& timeStr, String& dateStr) {
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("Failed to obtain time");
    return;
  }
  char timeBuffer[10];
  char dateBuffer[11];
  strftime(timeBuffer, sizeof(timeBuffer), "%I:%M %p", &timeinfo);
  strftime(dateBuffer, sizeof(dateBuffer), "%m/%d/%Y", &timeinfo);
  timeStr = String(timeBuffer);
  dateStr = String(dateBuffer);
}

