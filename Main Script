#include <WiFi.h>
#include <ESP_Mail_Client.h>
#include "time.h"

// Declare global SMTPSession and Session_Config objects
SMTPSession smtp;
Session_Config config;

// WiFi credentials
const char* ssid = "Jones Network";
const char* password = "jonespassword";

// Email details
const char* smtp_host = "smtp.google.com"; // Example: using Office 365
const int smtp_port = 587;
const char* smtp_email = "burkejones@gmail.com"; // Sender's email
const char* smtp_password = "ewf cahb srci yugf"; // App-specific password

// Email recipients
const char* recipient_email = "9139090608@txt.att.net"; // Recipient email (e.g., SMS gateway)

// Time and date settings
const char* ntpServer = "pool.ntp.org";
const long gmtOffset_sec = -21600;   // Central Time (UTC -6 hours)
const int daylightOffset_sec = 3600; // Daylight Saving Time offset (1 hour)

// Battery Voltage
#define BATTERY_PIN 34 // ADC pin to read battery voltage
float batteryVoltage = 0.0;
const float voltageThreshold = 3.3; // Low voltage threshold
const float voltageDividerRatio = 10.0 / 75.0; // Ratio for 10kΩ and 75kΩ resistors

// WiFi connection settings
const int wifiTimeoutMs = 10000; // 10 seconds timeout for Wi-Fi connection attempts

// Touchpad setup
const int touchPin = T0; // Capacitive touch pin
const int threshold = 30; // Threshold value for water detection
const int numReadings = 10; // Number of readings to average
int bootCount = 0;

// Function declarations
void sendAlert(String subject, String body);
void smtpCallback(SMTP_Status status);
void printLocalTime(String& timeStr, String& dateStr);
void callback();
void checkBattery();
bool connectToWiFi();
float readTouchSensor();

// Setup
void setup() {
  Serial.begin(115200);
  
  // Increment boot count
  ++bootCount;
  Serial.println("Boot number: " + String(bootCount));

  // Attempt to connect to Wi-Fi
  if (!connectToWiFi()) {
    Serial.println("Wi-Fi connection failed after timeout, entering deep sleep...");
    esp_deep_sleep_start();
  }

  // Initialize time
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);

  // Check battery voltage
  checkBattery();

  // Set up email session config
  config.server.host_name = smtp_host;
  config.server.port = smtp_port;
  config.login.email = smtp_email;
  config.login.password = smtp_password;
  config.login.user_domain = WiFi.localIP().toString().c_str(); // Set to client domain or public IP

  // Configure touchpad wakeup
  esp_sleep_enable_touchpad_wakeup();
  touchAttachInterrupt(touchPin, callback, threshold);

  // Configure timer wakeup (e.g., every 24 hours)
  esp_sleep_enable_timer_wakeup(24 * 60 * 60 * 1e6);

  // If woken up by timer, check time and water sensor
  if (esp_sleep_get_wakeup_cause() == ESP_SLEEP_WAKEUP_TIMER) {
    String timeStr;
    String dateStr;
    printLocalTime(timeStr, dateStr);

    if (timeStr == "12:00 PM") {
      checkBattery();
      
      float touchValue = readTouchSensor();
      bool waterDetected = touchValue > threshold;

      String subject;
      String messageBody;

      if (waterDetected) {
        subject = "Water Detected!";
        messageBody = "DANGER Water Detected!\nCheck basement ASAP!";
      } else {
        subject = "Just Checking In";
        messageBody = "NO water detected, just checking in!\nBattery Voltage: " + String(batteryVoltage, 2) + "V";
      }
      messageBody += "\nDate and Time: " + dateStr + " " + timeStr;
      sendAlert(subject, messageBody);
    }
  }

  // Sleep for touchpad wakeup or timer wakeup
  esp_deep_sleep_start();
}

// Loop (won't be reached due to deep sleep mode)
void loop() {
  // Empty
}

// Callback function for touchpad wakeup
void callback() {
  String timeStr;
  String dateStr;
  printLocalTime(timeStr, dateStr);
  
  checkBattery();
  float touchValue = readTouchSensor();

  if (touchValue > threshold) {
    String messageBody = "DANGER Water Detected!\nCheck basement ASAP!";
    messageBody += "\nDate and Time: " + dateStr + " " + timeStr;
    sendAlert("Water Detected!", messageBody);
  }

  esp_deep_sleep_start(); // Go back to deep sleep after sending email
}

// Print local time and date
void printLocalTime(String& timeStr, String& dateStr) {
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("Failed to obtain time");
    return;
  }
  char dateBuffer[20];
  char timeBuffer[10];
  strftime(dateBuffer, sizeof(dateBuffer), "%m/%d/%Y", &timeinfo);
  strftime(timeBuffer, sizeof(timeBuffer), "%I:%M %p", &timeinfo);

  dateStr = String(dateBuffer);
  timeStr = String(timeBuffer);

  Serial.println(dateStr + " " + timeStr);
}

// Send an alert email
void sendAlert(String subject, String body) {
  // Declare the SMTP_Message class variable
  SMTP_Message message;

  // Set the message headers
  message.sender.name = "Burke Jones";
  message.sender.email = smtp_email;
  message.subject = subject;
  message.addRecipient("Recipient", recipient_email);

  // Set the message content
  message.text.content = body;

  // Set debug option
  smtp.debug(1);

  // Set the callback function to get the sending results
  smtp.callback(smtpCallback);

  // Connect to the SMTP server and send email
  if (!smtp.connect(&config)) {
    Serial.println("Failed to connect to SMTP server");
    return;
  }

  if (!MailClient.sendMail(&smtp, &message)) {
    Serial.println("Error sending Email: " + smtp.errorReason());
  } else {
    Serial.println("Email sent successfully!");
  }

  // Close the SMTP session
  smtp.closeSession();
}

// SMTP callback function
void smtpCallback(SMTP_Status status) {
  // Print the status of the email sending process
  Serial.println(status.info());

  if (status.success()) {
    Serial.println("Email sent successfully.");
  }
}

// Function to check the battery voltage
void checkBattery() {
  // Read raw ADC value and convert it to voltage
  float adcValue = analogRead(BATTERY_PIN);
  batteryVoltage = adcValue * (3.3 / 4095.0) / voltageDividerRatio; // Adjust for voltage divider ratio

  Serial.println("Battery Voltage: " + String(batteryVoltage, 2) + "V");

  if (batteryVoltage < voltageThreshold) {
    Serial.println("WARNING: Battery voltage is low!");
  }
}

// Function to connect to Wi-Fi with timeout
bool connectToWiFi() {
  WiFi.begin(ssid, password);
  unsigned long startAttemptTime = millis();

  // Keep trying to connect until the timeout or connection is successful
  while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < wifiTimeoutMs) {
    Serial.println("Attempting to connect to Wi-Fi...");
    delay(500);
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("Connected to Wi-Fi");
    return true;
  } else {
    Serial.println("Failed to connect to Wi-Fi within the timeout");
    return false;
  }
}

// Function to read the capacitive touch sensor and average readings
float readTouchSensor() {
  float total = 0.0;
  for (int i = 0; i < numReadings; ++i) {
    total += touchRead(touchPin);
    delay(10); // Short delay between readings
  }
  float average = total / numReadings;
  return average;
}

